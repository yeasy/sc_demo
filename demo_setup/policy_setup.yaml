# This is a XGS demo HOT template just defining  a service policy
heat_template_version: 2013-05-23

description: >
  HOT template that just defines a service policy.
  Contains middleboxes to verify base demo.

#parameter_groups:
#  label: admin group
#  parameters:
#    admin-auth_url
#    admin-username

parameters:
  name:
    type: string
    description: Name of the generate policy
    default: p_trans_routed
  compute_node:
    type: string
    description: IP of the compute node
    default: 9.186.105.49
  sdn_controller:
    type: string
    description: IP of the sdn controller
    default: 9.186.105.154
  bidirectional:
    #type: boolean #boolean is not supported in G
    type: string
    description: Whether to generate policy in both directions
    default: F
  deploy:
    #type: boolean #boolean is not supported in G
    type: string
    description: Whether to deploy the generated policy
    #YAML will load any format of y/n, true/false, on/off, yes/no as boolean!
    default: F
  src:
    type: string
    description: Source net name of the policy
    default: net_int1
  dst:
    type: string
    description: Destination net name of the policy
    default: net_int2
  services:
    type: comma_delimited_list
    description: Middleboxes in the policy
    default: [trans_mb, routed_mb]
  admin-auth_url:
    type: string
    description: authentication url for admin role
    default: http://9.186.105.110:35357/v2.0
  admin-username:
    type: string
    description: authentication username for admin role
    default: admin
  admin-password:
    type: string
    description: authentication password for admin role
    default: admin
  admin-tenant_name:
    type: string
    description: tenant name for admin role
    default: admin
  project-auth_url:
    type: string
    description: authentication url for the project
    default: http://9.186.105.110:5000/v2.0
  project-username:
    type: string
    description: authentication username for the project
    default: user
  project-password:
    type: string
    description: authentication password for the project
    default: user
  project-tenant_name:
    type: string
    description: tenant name of the project
    default: IPSaaS
  routed_mb-egress_cidr:
    type: string
    description: Egress cidr of the mb
    default: 192.168.2.4/24
  routed_mb-egress_gw_addr:
    type: string
    description: Egress gw address of the mb
    default: 192.168.2.1
  routed_mb-ingress_cidr:
    type: string
    description: Ingress cidr of the mb
    default: 192.168.1.4/24
  routed_mb-ingress_gw_addr:
    type: string
    description: Ingress gw address of the mb
    default: 192.168.1.1
  routed_mb-service_type:
    type: string
    description: Service type of the mb
    default: firewall
  routed_mb-type:
    type: string
    description: Service type of the mb
    default: firewall
    constraints:
      - allowed_values: [firewall, ips]
  trans_mb-egress_ip:
    type: string
    description: Egress ip of the mb
    default: 10.0.4.2
  trans_mb-egress_node:
    type: string
    description: Egress node id of the mb
    default: 00:00:ba:c7:2e:94:6e:4a
  trans_mb-ingress_ip:
    type: string
    description: Ingress ip of the mb
    default: 10.0.3.2
  trans_mb-ingress_node:
    type: string
    description: Ingress node id of the mb
    default: 00:00:ba:c7:2e:94:6e:4a
  trans_mb-type:
    type: string
    description: Service type of the mb
    default: ips
    constraints:
      - allowed_values: [firewall, ips]

resources:
#trans middlebox
  trans_mb:
    type: OS::Neutron::TransMiddlebox
    properties:
      name: trans_mb
      type: {get_param: trans_mb-type}
      ingress_node: {get_param: trans_mb-ingress_node}
      egress_node: {get_param: trans_mb-egress_node}
      ingress_ip: {get_param: trans_mb-ingress_ip}
      egress_ip: {get_param: trans_mb-egress_ip}
  routed_mb:
    type: OS::Neutron::RoutedMiddlebox
    depends_on: trans_mb
    properties:
      name: routed_mb
      type: {get_param: routed_mb-type}
      ingress_cidr: {get_param: routed_mb-ingress_cidr}
      egress_cidr: {get_param: routed_mb-egress_cidr}
      ingress_gw_addr: {get_param: routed_mb-ingress_gw_addr}
      egress_gw_addr: {get_param: routed_mb-egress_gw_addr}
#Policy
  service_policy:
    type: OS::Neutron::ServicePolicy
    depends_on: [trans_mb, routed_mb]
    properties:
      name: {get_param: name}
      src: {get_param: src}
      dst: {get_param: dst}
      services: {get_param: services}
      compute_node: {get_param: compute_node}
      sdn_controller: {get_param: sdn_controller}
      bidirectional: {get_param: bidirectional}
      deploy: {get_param: deploy}
      admin_auth_url: {get_param: admin-auth_url}
      admin_username: {get_param: admin-username}
      admin_password: {get_param: admin-password}
      admin_tenant_name: {get_param: admin-tenant_name}
      project_auth_url: {get_param: project-auth_url}
      project_username: {get_param: project-username}
      project_password: {get_param: project-password}
      project_tenant_name: {get_param: project-tenant_name}

outputs:
  policy_name:
    description: The Name of the policy
    value: { get_attr: [service_policy, name] }
